//HintName: TestClassReflector.g.cs
// <auto-generated />
#nullable enable

namespace TestNamespace
{
public class TestClassReflector : global::Shiny.Reflector.IReflectorClass
{
    private readonly global::TestNamespace.TestClass _reflectedObject;

    public TestClassReflector(global::TestNamespace.TestClass reflectedObject)
    {
        _reflectedObject = reflectedObject;
    }

    public object ReflectedObject => _reflectedObject;

    public global::Shiny.Reflector.PropertyGeneratedInfo[] Properties => new global::Shiny.Reflector.PropertyGeneratedInfo[]
    {
        new global::Shiny.Reflector.PropertyGeneratedInfo("Id", typeof(global::System.Guid), false),
        new global::Shiny.Reflector.PropertyGeneratedInfo("Name", typeof(string), true),
        new global::Shiny.Reflector.PropertyGeneratedInfo("Number", typeof(int), true),
        new global::Shiny.Reflector.PropertyGeneratedInfo("Date", typeof(global::System.DateTimeOffset), true),
        new global::Shiny.Reflector.PropertyGeneratedInfo("IsActive", typeof(bool), true),
        new global::Shiny.Reflector.PropertyGeneratedInfo("Price", typeof(decimal), true),
        new global::Shiny.Reflector.PropertyGeneratedInfo("Related", typeof(global::TestNamespace.AnotherClass), true)
    };

    public T? GetValue<T>(string key)
    {
        var value = this[key];
        if (value == null)
            return default(T);

        return (T)value;
    }

    public object? this[string key]
    {
        get
        {
            switch (key?.ToLower())
            {
                case "id":
                    return _reflectedObject.Id;
                case "name":
                    return _reflectedObject.Name;
                case "number":
                    return _reflectedObject.Number;
                case "date":
                    return _reflectedObject.Date;
                case "isactive":
                    return _reflectedObject.IsActive;
                case "price":
                    return _reflectedObject.Price;
                case "related":
                    return _reflectedObject.Related;
                default:
                    throw new global::System.InvalidOperationException($"Cannot get value for key '{key}' in TestClassReflector");
            }
        }
        set
        {
            switch (key?.ToLower())
            {
                case "name":
                    if (value is not null and not string)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a string value.");

                    _reflectedObject.Name = (string)value;
                    break;

                case "number":
                    if (value != null && value is not int)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a int? value.");

                    _reflectedObject.Number = (int?)value;
                    break;

                case "date":
                    if (value is not null and not global::System.DateTimeOffset)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a global::System.DateTimeOffset value.");

                    _reflectedObject.Date = (global::System.DateTimeOffset)value;
                    break;

                case "isactive":
                    if (value is not null and not bool)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a bool value.");

                    _reflectedObject.IsActive = (bool)value;
                    break;

                case "price":
                    if (value is not null and not decimal)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a decimal value.");

                    _reflectedObject.Price = (decimal)value;
                    break;

                case "related":
                    if (value is not null and not global::TestNamespace.AnotherClass)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a global::TestNamespace.AnotherClass value.");

                    _reflectedObject.Related = (global::TestNamespace.AnotherClass)value;
                    break;

                default:
                    throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector");
            }
        }
    }

    public void SetValue<T>(string key, T? value)
    {
        this[key] = value;
    }

    public global::Shiny.Reflector.AttributeInfo[] Attributes => new global::Shiny.Reflector.AttributeInfo[]
    {
        new global::Shiny.Reflector.AttributeInfo(
            typeof(Shiny.Reflector.ReflectorAttribute),
            new global::Shiny.Reflector.AttributeArgumentInfo[]
            {
            }
        )
    };
}
}
