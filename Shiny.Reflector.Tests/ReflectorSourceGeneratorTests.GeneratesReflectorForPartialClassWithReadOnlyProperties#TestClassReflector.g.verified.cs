//HintName: TestClassReflector.g.cs
// <auto-generated />
#nullable enable

namespace TestNamespace
{
public class TestClassReflector : global::Shiny.Reflector.IReflectorClass
{
    private readonly global::TestNamespace.TestClass _reflectedObject;

    public TestClassReflector(global::TestNamespace.TestClass reflectedObject)
    {
        _reflectedObject = reflectedObject;
    }

    public object ReflectedObject => _reflectedObject;

    public global::Shiny.Reflector.PropertyGeneratedInfo[] Properties => new global::Shiny.Reflector.PropertyGeneratedInfo[]
    {
        new global::Shiny.Reflector.PropertyGeneratedInfo("Id", typeof(global::System.Guid), false),
        new global::Shiny.Reflector.PropertyGeneratedInfo("Name", typeof(string), true),
        new global::Shiny.Reflector.PropertyGeneratedInfo("CreatedAt", typeof(global::System.DateTime), false)
    };

    public T? GetValue<T>(string key)
    {
        var value = this[key];
        if (value == null)
            return default(T);

        return (T)value;
    }

    public object? this[string key]
    {
        get
        {
            switch (key?.ToLower())
            {
                case "id":
                    return _reflectedObject.Id;
                case "name":
                    return _reflectedObject.Name;
                case "createdat":
                    return _reflectedObject.CreatedAt;
                default:
                    throw new global::System.InvalidOperationException($"Cannot get value for key '{key}' in TestClassReflector");
            }
        }
        set
        {
            switch (key?.ToLower())
            {
                case "name":
                    if (value is not null and not string)
                        throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector. Expected a string value.");

                    _reflectedObject.Name = (string)value;
                    break;

                default:
                    throw new global::System.InvalidOperationException($"Cannot set value for key '{key}' in TestClassReflector");
            }
        }
    }

    public void SetValue<T>(string key, T? value)
    {
        this[key] = value;
    }

    public global::Shiny.Reflector.AttributeInfo[] Attributes => new global::Shiny.Reflector.AttributeInfo[]
    {
        new global::Shiny.Reflector.AttributeInfo(
            typeof(Shiny.Reflector.ReflectorAttribute),
            new global::Shiny.Reflector.AttributeArgumentInfo[]
            {
            }
        )
    };
}
}
